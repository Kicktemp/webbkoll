#results-header

  section#results-title
    .alpha
      h2
        span> class="light"
          = gettext "Results for"
        span.semibold
          = @meta["host"]
    .beta
      a.button href="#{site_path(@conn, :check, @conn.assigns.locale, url: @site.final_url, refresh: "on")}"
        i.icon-refresh
        = gettext("Check again")
      i.icon-clock-o
      = format_naivedatetime(@site.updated_at)

  section#input-url
    p
      | #{gettext "Input URL:"} 
      = link @site.input_url, to: @site.input_url, rel: "nofollow"
    p 
      | #{gettext "Final URL:"} 
      = link @site.final_url, to: @site.final_url, rel: "nofollow"

  section
    .stats
      ul
        li
          = if @site.data["scheme"] == "https" do
            .value
              i.icon-lock.success
            .label
              a href="#https" #{gettext("Secure")}
          - else
            .value
              i.icon-unlock-alt.alert
            .label
              a href="#https" #{gettext "Insecure"}
        li
          = if @meta["referrer_policy"]["status"] != "other" do
            .value
              i class="#{@meta["referrer_policy"]["icon"]}"
            .label
              a href="#referrers"
                = @meta["referrer_policy"]["text"]
        li
          .value
            = @site.data["cookie_count"]["first_party"] + @site.data["cookie_count"]["third_party"]
          .label
            a href="#cookies"
              = ngettext("Cookie", "Cookies", (@site.data["cookie_count"]["first_party"] + @site.data["cookie_count"]["third_party"]))
        li
          .value
            = @site.data["third_party_request_count"]["total"]
          .label
            a href="#requests"
              = ngettext("Third-party request", "Third-party requests", @site.data["third_party_request_count"]["total"])
            </a>
        li
          .value
            = @site.data["third_party_request_count"]["unique_hosts"]
          .label
            a href="#requests"
              = ngettext("Third-party contacted", "Third-parties contacted", @site.data["third_party_request_count"]["unique_hosts"])

#results
  = if @site.data["geolocation"] do
    section class="result"
      .alpha
        p
          = gettext(~s|The server <strong>%{domain}</strong> (%{host_ip}) appears to have been located in <strong>%{country}</strong> during our test.|, domain: @meta["host"], host_ip: @site.data["host_ip"], country: country_from_iso(@conn.assigns.locale, @site.data["geolocation"])) |> raw
      .beta
        p
          = gettext(~s|Please note that some sites use CDNs &ndash; <a href="https://en.wikipedia.org/wiki/Content_delivery_network">content delivery networks</a> &ndash; in which case the server location might vary depending on the location of the visitor. This tool, Webbkoll, is currently on a server in London, UK.|) |> raw

  section class="result #{if @site.data["scheme"] == "https", do: "success", else: "alert"}"
    h3#https
      = if @site.data["scheme"] == "https" do
        = gettext "Secure connection"
      - else
        = gettext "Insecure connection"

    .alpha
      p
        = if @site.data["scheme"] == "https" do
          = raw(gettext "<code>%{domain}</code> uses HTTPS by default.", domain: @meta["host"])
        - else
          = raw(gettext "<code>%{domain}</code> does <strong>not</strong> use HTTPS by default.", domain: @meta["host"])
      p
        = gettext "HTTPS encrypts nearly all information sent between a client and a web service. Properly configured, it guarantees three things:"
      
      ul
        li
          = gettext("<strong>Confidentiality</strong>. The visitor's connection is encrypted, obscuring URLs, cookies, and other sensitive metadata.") |> raw
        li
          = gettext(~s|<strong>Authenticity</strong>. The visitor is talking to the "real" website, and not to an impersonator or through a "man-in-the-middle".|) |> raw
        li
          = gettext(~s|<strong>Integrity</strong>. The data sent between the visitor and the website has not been tampered with or modified.|) |> raw
      p
        = gettext "A plain HTTP connection can be easily monitored, modified, and impersonated. Every unencrypted HTTP request reveals information about a userâ€™s behavior, and the interception and tracking of unencrypted browsing has become commonplace."
      
      p
        = gettext(~s|The goal of the Internet community is to establish encryption as the norm, and to phase out unencrypted connections. See <a href="https://www.w3.org/2001/tag/doc/web-https" title="Securing the Web">W3C</a>, <a href="https://datatracker.ietf.org/doc/rfc7258/" title="Pervasive Monitoring Is an Attack">IETF</a>, <a href="https://www.iab.org/2014/11/14/iab-statement-on-internet-confidentiality/" title="IAB Statement on Internet Confidentiality">IAB</a>. Also:|) |> raw

      ul
        li
          = gettext(~s|Browsers support <a href="https://en.wikipedia.org/wiki/HTTP/2">HTTP/2</a> &mdash; which improves page loading speeds &mdash; <em>only</em> over encrypted connections.|) |> raw
        li
          = gettext(~s|Google Chrome (<a href="https://www.chromium.org/Home/chromium-security/marking-http-as-non-secure">1</a>, <a href="https://www.chromium.org/Home/chromium-security/deprecating-powerful-features-on-insecure-origins">2</a>) and Mozilla Firefox (<a href="https://blog.mozilla.org/security/2015/04/30/deprecating-non-secure-http/">1</a>) will mark plain HTTP as affirmatively non-secure and make powerful features impossible to use on non-secure sites.|) |> raw
        li
          = gettext(~s|Google has begun to <a href="https://googleonlinesecurity.blogspot.com/2014/08/https-as-ranking-signal_6.html">favor HTTPS websites in search rankings</a>.|) |> raw

    .beta
      = if @site.data["scheme"] == "https" do   
        p
          = gettext "Please note that this tool only checks whether HTTPS is used by default. Next step is to ensure that the server is configured correctly and not susceptible to attacks due to out-of-date software, weak ciphers, etc."
        p
          = gettext "Such things are out of scope for this tool, but Qualys SSL Labs provides an excellent free service that lets you check how a server is doing:"
        
        p
          = link gettext("Analyze %{host} on SSL Labs", host: @meta["host"]), to: "https://www.ssllabs.com/ssltest/analyze.html?d=#{@meta["host"]}"
      - else
        p
          = gettext(~s|To enable HTTPS on a website, a <strong>certificate</strong> for the domain needs to be installed on the web server. To get a certificate that browsers will trust, you need one issued by a trusted certificate authority (otherwise a visitor's browser will show a warning).|) |> raw
        p
          = gettext(~s|<a href="https://letsencrypt.org/">Let's Encrypt</a> is a non-profit certificate authority (sponsored by Mozilla, EFF, Cisco, Facebook and others) providing free <em>domain-validated</em> (<DV) certificates through an easy, automated process.|) |> raw
        p
          = gettext(~s|To get a DV certificate, you only need to prove that you <span title="By, for example, publishing a certain file to your web server or responding to an email sent to the contact in your domain's WHOIS record">control the domain</span>. To get an <em>Extended Validation</em> (EV) certificate, you must pass a more thorough identity verification process.|) |> raw
        p
          = gettext(~s|There is no difference in encryption between DV and EV certificates, but they are typically displayed differently in browsers. EV certificates generally result in the domain owner's name appearing in the browser URL bar that visitors see.|) |> raw
        p
          = gettext "DV certificates are the most common. Let's Encrypt only issues DV certificates."

  = if @site.data["scheme"] == "https" and @site.data["insecure_requests_count"] > 0 do
    section.result.warning
      h3#mixed-content
        = gettext "...but it's not fully secure"

      .alpha
        p
          = ngettext "The page loads one resource through insecure HTTP.", "The page loads some resources through insecure HTTP.", @site.data["insecure_requests_count"]
          a< href="#requests"
            = ngettext "See which.", "See which.", @site.data["insecure_requests_count"]

        p
          = gettext "The site includes content served over insecure HTTP. Such content can be intercepted and manipulated, leaving the visitor vulnerable to attacks."

        p
          = gettext "Modern browsers typically block at least certain types of insecure content (such as iframes, JavaScript and CSS) by default. Firefox, for example, also shows a grey warning triangle next to the green lock if insecure elements have been blocked."

      .beta
        p
          = gettext(~s|Make sure all resources are loaded over HTTPS. For resources loaded from the same domain as your site, use relative URLs, e.g. <code>&lt;img src="/images/foo.png"&gt;</code> instead of <code>&lt;img src="http://example.com/images/foo.png"&gt;</code>.|) |> raw

        p
          = gettext(~s|It's also possible to use protocol-relative URLs like <code>&lt;img src="//example.com/images/foo.png"&gt;</code>. However, we discourage this. If a resource is available through HTTPS, you should <em>only</em> load it over HTTPS, even on insecure pages &mdash; otherwise you make man-in-the-middle attacks easier. (Loading an HTTPS resource on an HTTP page will not generate any warnings.)|) |> raw

  = if @site.data["scheme"] == "https" do
    section class="result #{if @meta["hsts"], do: "success", else: "warning"}"
      h3#hsts
        = if @meta["hsts"], do: gettext("Strict Transport Security enabled"), else: gettext("Strict Transport Security not enabled")

      .alpha
        = if @meta["hsts"] do
            p
              = gettext(~s|HSTS enabled with value <code>%{value}</code>.|, value: @meta["hsts"]) |> raw
        p
          = gettext(~s|HTTP Strict Transport Security (HSTS) is a simple and widely supported standard to protect visitors by ensuring that their browsers always connect to a website over HTTPS. HSTS exists to remove the need for the common, insecure practice of redirecting users from <code>http://</code> to <code>https://</code> URLs.|) |> raw

        p
          = gettext "When a browser knows that a domain has enabled HSTS, it does two things:"

        ul
          li
            = gettext(~s|Always uses an <code>https://</code> connection, even when clicking on an <code>http://</code> link or after typing a domain into the location bar without specifying a protocol.|) |> raw
          li
            = gettext "Removes the ability for users to click through warnings about invalid certificates."
        p
          = gettext(~s|Strict Transport Security was <a href="https://lists.w3.org/Archives/Public/www-archive/2009Sep/att-0051/draft-hodges-strict-transport-sec-05.plain.html">proposed in 2009</a>, motivated by <a href="http://www.thoughtcrime.org/software/sslstrip/">Moxie Marlinspike's demonstration</a> of how a hostile network could downgrade visitor connections and exploit insecure redirects. It was quickly adopted by several major web browsers, and <a href="https://tools.ietf.org/html/rfc6797">finalized as RFC 6797 in 2012.</a>|) |> raw

        p
          = gettext "The basic problem that HSTS solves is that even after a website turns on HTTPS, visitors may still end up trying to connect over plain HTTP. For example:"

        ul
          li
            = gettext(~s|When a user types "example.com" into the URL bar, browsers default to using <code>http://</code>.|) |> raw
          li
            = gettext(~s|A user may click on an old link that mistakenly uses an <code>http://</code> URL.|) |> raw
          li
            = gettext(~s|A userâ€™s network may be hostile and actively rewrite <code>https://</code> links to <code>http://</code>.|) |> raw

      .beta
        p
          = gettext "In its simplest form, the policy tells a browser to enable HSTS for that exact domain or subdomain, and to remember it for a given number of seconds (the policy is refreshed every time browser sees the header again):"

        p
          code Strict-Transport-Security: max-age=31536000;
        p
          = gettext(~s|In its <strong>strongest and recommended form</strong>, the HSTS policy <strong>includes all subdomains</strong>, and indicates a willingness to be "preloaded" into browsers:|) |> raw
        p
          code Strict-Transport-Security: max-age=31536000; includeSubDomains; preload

        p
          = gettext "Since it's just an HTTP header, HSTS is very easy to add to a domain."

        p
          = gettext "However, to enable HSTS for a domain via the HTTP header, the browser does have to see the header at least once. This means that users are not protected until after their first successful secure connection to a given domain."

        p
          = gettext(~s|To solve the "first visit" problem, the Chrome security team created an "HSTS preload list": a <a href="https://chromium.googlesource.com/chromium/src/+/master/net/http/transport_security_state_static.json">list of domains</a> baked into Chrome that get Strict Transport Security enabled automatically, even for the first visit. Firefox, Safari, and newer versions of Internet Explorer also incorporate Chromeâ€™s HSTS preload list.|) |> raw

        p
          = gettext(~s|The Chrome security team allows anyone to <a href="https://hstspreload.appspot.com/">submit their domain to the list</a>, provided it meets a few requirements.|) |> raw

        p
          = gettext(~s|<a href="https://https.cio.gov/hsts/">Read more about HSTS</a> and how to configure it in nginx, Apache and IIS.|) |> raw

  section class="result #{@meta["referrer_policy"]["status"]}"
    h3#referrers
      = @meta["referrer_policy"]["text"]
    .alpha
      = if @meta["meta_referrer"] || @meta["csp_referrer"] do
        = if @meta["meta_referrer"] do
          p
            = gettext("Meta referrer is set to <code>%{value}</code>.", value: @meta["meta_referrer"]) |> raw
        = if @meta["csp_referrer"] do
          p
            = gettext(~s|Referrer directive is set to <code>%{value}</code> in <a href="https://developer.mozilla.org/en-US/docs/Web/Security/CSP/CSP_policy_directives#referrer">Content-Security-Policy (CSP) header</a>.|, value: @meta["csp_referrer"]) |> raw
        = if @meta["meta_referrer"] && @meta["csp_referrer"] do
          p
            = gettext("<em>If a referrer policy is delivered via both CSP and a meta element, the meta element's policy takes precedence.</em>") |> raw

      p
        = gettext(~s|When you click a link, your browser will typically send the HTTP <em>referer</em> [sic] header to the webserver where the destination webpage is at. The header contains the full URL of the page you came from. This lets sites see where traffic comes from. The header is also sent when external resources (such as images, fonts, JS and CSS) are loaded.|) |> raw
      
      p
        = gettext "The referrer header is privacy nightmare as it allows websites and services to track you across the web and learn about your browsing habits (and thus possibly private, sensitive information), particularly when combined with cookies."

      p
        = gettext(~s|Let's say you're logged in on Facebook. You visit a page with the URL <code>http://www.some-hospital.com/some-medical-condition</code>. On that page, you click a link to their Facebook page. Your browser then sends <code>Referer: http://www.some-hospital.com/some-medical-condition</code> to <code>facebook.com</code>, along with your Facebook cookies, allowing Facebook to associate your identity with that particular page.|) |> raw
      
      p
        = gettext "The problem is made worse by the fact that many websites load resources like images and scripts from dozens of third-parties, sending referrer information to all of them, with the typical visitor having no idea that this is happening."

    .beta
      p
        = gettext(~s|Thanks to a fairly recent development, <em><a href="https://w3c.github.io/webappsec-referrer-policy/">Referrer Policy</a></em>, it's finally possible for websites to tell browsers to not leak referrers. It lets you specify a policy that's applied to all links clicked, as well as all other requests generated by the page (images, JS, etc.).|) |> raw
      
      p
        = gettext(~s|<a href="https://w3c.github.io/webappsec-referrer-policy/#referrer-policies">A few different policies are offered</a>, such as <code>origin</code> (strips everything except the <a href="https://tools.ietf.org/html/rfc6454#section-3.2">origin</a>) and <code>origin-when-cross-origin</code> (sends full URL with same-origin requests, otherwise stripped). The only one we recommend is <strong><code>no-referrer</code></strong>, which kills the referrer header entirely for all requests, no matter the destination.|) |> raw
      p
        = gettext(~s|A referrer policy can easily be set with a <code>&lt;meta&gt;</code> element in your HTML. Simply include this inside the <code>&lt;head&gt;</code> section:|) |> raw
      p
        code
          | &lt;meta name="referrer" content="no-referrer"&gt;
      p
        = gettext(~s|While still a work in progress, Referrer Policy is now <a href="http://caniuse.com/referrer-policy">supported by all major browsers</a> (except Internet Explorer, although it <em>is</em> supported by Edge, the new browser in Windows 10).|) |> raw

  = if Enum.count(@meta["services"]) > 0 do
    section.result.third-party
      h3
        = gettext "Third-party services"
    = for service <- @meta["services"] do
      section.result.alert
        .alpha
          p = get_service(service, "description") |> raw
        .beta
          p = get_service(service, "alternative") |> raw

  = if @site.data["cookie_count"]["first_party"] == 0 do
    section.result.success
      h3#cookies = gettext "First-party cookies"
      p = gettext "No first-party cookies without consent."
  - else
    section.result.warning
      h3#cookies = gettext "First-party cookies"
      p
        = ngettext("<strong>One</strong> first-party cookie.", "<strong>%{count}</strong> first-party cookies.", @site.data["cookie_count"]["first_party"]) |> raw 
      = render "_cookies.html", cookies: @site.data["cookies"]["first_party"]

  = if @site.data["cookie_count"]["third_party"] == 0 do
    section.result.success
      h3#cookies = gettext "Third-party cookies"
      p = gettext "No third-party cookies without consent."
  - else
    section.result.warning
      h3#cookies = gettext "Third-party cookies"
      p
        = ngettext("<strong>One</strong> third-party cookie.", "<strong>%{count}</strong> third-party cookies.", @site.data["cookie_count"]["third_party"]) |> raw
      = render "_cookies.html", cookies: @site.data["cookies"]["third_party"]

  section.result
    = if @site.data["third_party_request_count"]["total"] == 0 do
      h3#requests
        = gettext "Third-party requests"
      p
        = gettext "No third-party requests."
      p
        = gettext("A third-party request is a request to a domain that's not <code>%{domain}</code> or one of its subdomains.", domain: @meta["reg_domain"]) |> raw
    - else
      h3#requests
        = gettext "Third-party requests"
      p
        | <strong><%= @site.data["third_party_request_count"]["total"] %></strong> <%= ngettext "request", "requests", @site.data["third_party_request_count"]["total"] %> (<%= ngettext "1 secure", "%{count} secure", @site.data["third_party_request_types"]["secure"] %>, <%= ngettext "%{count} insecure", "%{count} insecure", @site.data["third_party_request_types"]["insecure"] %>) <%= gettext "to" %> <strong><%= @site.data["third_party_request_count"]["unique_hosts"] %></strong> <%= ngettext "unique", "unique", @site.data["third_party_request_count"]["unique_hosts"] %> <%= ngettext "host", "hosts", @site.data["third_party_request_count"]["unique_hosts"] %>.
      p
        = gettext("A third-party request is a request to a domain that's not <code>%{domain}</code> or one of its subdomains.", domain: @meta["reg_domain"]) |> raw

      table.requests.data data-sortable="true"
        thead
          tr
            th width="200" data-default-sort="true" = gettext "Host"
            th width="200" = gettext "Classification"
        tbody
          = for host <- get_unique_hosts(@site.data["third_party_requests"], "host") do
            tr
              td = host
              td = Webbkoll.Trackers.check(PublicSuffix.registrable_domain(host, ignore_private: true))

      p
        = gettext(~s|We use Disconnect's <a href="%{url}">open source list of trackers</a> to classify hosts.|, url: "https://github.com/disconnectme/disconnect-tracking-protection") |> raw


      p = gettext "Full list of third-party requests:"
        ul.no-bullet.requests-list
          = for req <- @site.data["third_party_requests"] do
            li
              = if String.starts_with?(req["url"], "https") do
                i.icon-lock
              - else
                i.icon-unlock-alt
              = req["host"]
              = link " (#{truncate(req["url"], 50)})", to: req["url"]

  section.result
    = if @site.data["meta_csp"] || @site.data["header_csp"] do
      h3#csp
        = gettext("Content-Security-Policy enabled")
      = if @site.data["header_csp"] do
        = gettext("Content-Security-Policy HTTP header is set to <code>%{value}</code>.", value: @site.data["header_csp"]) |> raw
      = if @site.data["meta_csp"] do
        = gettext("Content-Security-Policy meta element is set to <code>%{value}</code>.", value: @site.data["meta_csp"]) |> raw
      = if @site.data["header_csp"] && @site.data["meta_csp"] do
        p
          = gettext("<em>The Content-Security-Policy is delivered via both HTTP header and meta element. The HTTP header's policy takes precedence.</em>") |> raw
    - else
      h3#csp
        = gettext("Content-Security-Policy not enabled")
    p
      = gettext(~s{<a href="https://developer.mozilla.org/en-US/docs/Web/Security/CSP">Content Security Policy</a> is an effective measure to protect your site from <a href="https://developer.mozilla.org/en-US/docs/Glossary/Cross-site_scripting">XSS</a> attacks. By whitelisting sources of approved content, you can prevent the browser from loading malicious assets. It can also help prevent information leakage.}) |> raw
    p
      = gettext(~s{<a href="https://report-uri.io/home/tools">report-uri.io</a> has excellent (free) tools with which you can build or analyze a Content Security Policy.}) |> raw

  section.result
    h3#headers = gettext "HTTP headers"
    = render "_headers.html", headers: @site.data["headers"]

  section.result
    h3#info = gettext "What this tool checks (and doesn't check)"

    p = gettext "This tool attempts to simulate what happens when a user visits a specified page with a typical browser. The browser has no addons/extensions installed, and Do Not Track (DNT) is not enabled, since this is the default setting in most browsers."

    p = gettext("External files such as images, scripts and CSS are loaded, but the tool performs no interactions with the page &mdash; no links are clicked, no forms are submitted.") |> raw

    p
      i
        = gettext "Disclaimer: The results presented here might not be 100% correct. Bugs happen. This tool is meant to be used by site owners as a starting point for improvements, not as a rigorous analysis."

    p
      = gettext(~s|The HTTP header descriptions are based on the ones from <a href="https://securityheaders.io/">securityheaders.io</a> by Scott Helme, <a href="https://creativecommons.org/licenses/by-sa/4.0/deed.en_GB">CC-BY-SA 4.0</a>. Text about HTTPS partly adapted from the CIO Council's <a href="https://https.cio.gov/">The HTTPS-Only Standard</a> (public domain). <a href="http://www.maxmind.com">MaxMind's</a> GeoLite2 country database (CC-BY-SA 4.0) is used for GeoIP lookups.|) |> raw